(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'message' referenced before assignment"
p3
sS'layer'
p4
S'/Users/habibi/web2py/applications/camp/controllers/default.py'
p5
sS'code'
p6
S'def index():\n    login = A("login", _href=URL("user/login"))\n    users = db(db.auth_user).select()\n    images = db(db.image).select()\n    pages = db(db.page).select()\n    form = FORM(INPUT(_id=\'keyword\',_name=\'keyword\',_onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');"))\n    target_div = DIV(_id=\'target\')\n    return dict(pages=pages, users=users, images=images, login=login, form=form, target_div=target_div)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef about():\n    return dict()\n\ndef registration():\n    return dict()\n\ndef activities():\n    return dict()\n\ndef nurses():\n    return dict()\n\ndef buySomethingElse():\n    form = SQLFORM(db.pending, formstyle=\'divs\', submit_button=\'Buy\')\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        session.pending = form.vars\n        redirect(URL(\'default\', \'paypal\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\ndef all():\n    return dict(grid=SQLFORM.smartgrid(db.pending))\n\ndef pending():\n    return dict(grid=SQLFORM.smartgrid(db.confirmed_trans))\n\ndef paypal():\n    if not session.pending:\n        redirect(URL(\'default\', \'index\'))\n    return dict()\n\ndef success():\n    # log_file(str(request.vars), \'tmp/paypal.return\')\n    if request.args(0) == \'paypal\':\n        if response:\n            message = \'Thank you! You payment is complete and your order is being prepared.\'\n        else:\n            message = \'Sorry. An error has occured and you payment did not go through.\'\n    return dict(message=message)\n\ndef staff():\n    return dict()\n\n@auth.requires_login()\ndef staff_app():\n    form = SQLFORM(db.staff)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\ndef counselor():\n    return dict()\n\n@auth.requires_login()\ndef counselor_app():\n    form = SQLFORM(db.counselor)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\ndef camper():\n    return dict()\n\n@auth.requires_login()\ndef camper_app():\n    form = SQLFORM(db.camper)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'guardian\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef guardian():\n    form = SQLFORM(db.guardian)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'medical_information\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef medical_information():\n    form = SQLFORM(db.medical_information)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'eating\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef eating():\n    form = SQLFORM(db.eating)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'behavior\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef behavior():\n    form = SQLFORM(db.behavior)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'transportation\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef transportation():\n    form = SQLFORM(db.transportation)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'new_camper_information\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef new_camper_information():\n    form = SQLFORM(db.new_camper_information)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'camp_parent_questionnaire\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef camp_parent_questionnaire():\n    form = SQLFORM(db.camp_parent_questionnaire)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        redirect(URL(\'default\', \'buySomethingElse\'))\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\ndef donate():\n    return dict()\n\ndef wishlist():\n    return dict()\n\ndef questions():\n    return dict()\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\ndef search():\n     """an ajax wiki search page"""\n     return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\',\n              _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")),\n              target_div=DIV(_id=\'target\'))\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(success)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/habibi/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/habibi/web2py/applications/camp/controllers/default.py", line 228, in <module>\n  File "/Users/habibi/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/habibi/web2py/applications/camp/controllers/default.py", line 70, in success\n    return dict(message=message)\nUnboundLocalError: local variable \'message\' referenced before assignment\n'
p11
s.