(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'function' object has no attribute 'accepted'"
p3
sS'layer'
p4
S'/Users/habibi/web2py/applications/camp/controllers/default.py'
p5
sS'code'
p6
S'def index():\n    login = A("login", _href=URL("user/login"))\n    users = db(db.auth_user).select()\n    images = db(db.image).select()\n    pages = db(db.page).select()\n    form = FORM(INPUT(_id=\'keyword\',_name=\'keyword\',_onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');"))\n    target_div = DIV(_id=\'target\')\n    return dict(pages=pages, users=users, images=images, login=login, form=form, target_div=target_div)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@auth.requires_login()\ndef staff():\n    form = SQLFORM(db.staff)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef counselor():\n    form = SQLFORM(db.counselor)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef camper():\n    form = SQLFORM(db.camper)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef guardian():\n    form = SQLFORM(db.guardian)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef medical_information():\n    form = SQLFORM(db.medical_information)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef eating():\n    form = SQLFORM(db.eating)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef behavior():\n    form = SQLFORM(db.behavior)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef transportation():\n    form = SQLFORM(db.transportation)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef new_camper_information():\n    form = SQLFORM(db.new_camper_information)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef camp_parent_questionnaire():\n    form = SQLFORM(db.camp_parent_questionnaire)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef pay():\n    from gluon.contrib.stripe import StripeForm\n    form = StripeForm(\n        pk=\'pk_test_t_6pRNASCoBOKtIshFeQd4XMUh\',\n        sk=\'sk_test_BQokikJOvBiI2HlWgH4olfQ2\',\n        amount=int(150), #1.5 amount is in cents\n        description=\'you paid for one week at camp\')\n    if form.process.accepted:\n        redirect(URL(\'thankyou\'))\n    return dict(form=form)\n\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\ndef search():\n     """an ajax wiki search page"""\n     return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\',\n              _onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")),\n              target_div=DIV(_id=\'target\'))\n\n@auth.requires_login()\ndef createpage():\n    from gluon.tools import Crud\n    crud = Crud(db)\n    form = crud.create(db.page) if auth.user else None\n    return dict(form=form)\n\n@auth.requires_login()\ndef editpage():\n    this_page = db.page(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    from gluon.tools import Crud\n    crud = Crud(db)\n    form = crud.update(db.page, this_page.id) if auth.user else None\n    return dict(form=form)\n\n@auth.requires_login()\ndef createpost():\n    from gluon.tools import Crud\n    crud = Crud(db)\n    form = crud.create(db.blogpost) if auth.user else None\n    return dict(form=form)\n\n@auth.requires_login()\ndef editpost():\n    this_post = db.blogpost(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    from gluon.tools import Crud\n    crud = Crud(db)\n    form = crud.update(db.page, this_post.id) if auth.user else None\n    return dict(form=form)\n\n@auth.requires_login()\ndef editcomment():\n    this_comment = db.comment(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    from gluon.tools import Crud\n    crud = Crud(db)\n    form = crud.update(db.comment, this_comment.id) if auth.user else None\n    return dict(form=form)\n\ndef callback():\n     """an ajax callback that returns a <ul> of links to wiki pages"""\n     query = db.page.title.contains(request.vars.keyword)\n     pages = db(query).select(orderby=db.page.title)\n     links = [A(p.title, _href=URL(\'show\',args=p.id)) for p in pages]\n     return UL(*links)\n\ndef show():\n     """shows a wiki page"""\n     this_page = db.page(request.args(0,cast=int)) or redirect(URL(\'index\'))\n     db.blogpost.blogpage_id.default = this_page.id\n     form = SQLFORM(db.blogpost).process() if auth.user else None\n     blogpost = db(db.blogpost.blogpage_id==this_page.id).select()\n     users = db(db.auth_user).select()\n     return dict(page=this_page, blogpost=blogpost, form=form, users=users)\n\ndef showpost():\n    this_post = db.blogpost(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    db.comment.blogpost_id.default = this_post.id\n    comment = db(db.comment.blogpost_id==this_post.id).select()\n    users = db(db.auth_user).select()\n    form = SQLFORM(db.comment).process() if auth.user else None\n    return dict(post=this_post, comment=comment, users=users, form=form)\n\ndef showuser():\n    this_user = db.auth_user(request.args(0, cast=int)) or redirect(URL(\'index\'))\n    db.page.created_by.default = this_user.id\n    pages = db(db.page.created_by==this_user.id).select()\n    return dict(user=this_user, pages=pages)\n\ndef showusers():\n    login = A("login", _href=URL("user/login"))\n    users = db(db.auth_user).select()\n    images = db(db.image).select()\n    pages = db(db.page).select()\n    form = FORM(INPUT(_id=\'keyword\',_name=\'keyword\',_onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');"))\n    target_div = DIV(_id=\'target\')\n    return dict(pages=pages, users=users, images=images, login=login, form=form, target_div=target_div)\n    return dict()\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(pay)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/habibi/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/habibi/web2py/applications/camp/controllers/default.py", line 248, in <module>\n  File "/Users/habibi/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/habibi/web2py/gluon/tools.py", line 3775, in f\n    return action(*a, **b)\n  File "/Users/habibi/web2py/applications/camp/controllers/default.py", line 146, in pay\n    if form.process.accepted:\nAttributeError: \'function\' object has no attribute \'accepted\'\n'
p11
s.